;**************************************************************************************
;  Copyright 2006 Micron Technology, Inc. All rights reserved.
;
;
;  No permission to use, copy, modify, or distribute this software and/or
;  its documentation for any purpose has been granted by Micron Technology, Inc.
;  If any such permission has been granted ( by separate agreement ), it
;  is required that the above copyright notice appear in all copies and
;  that both that copyright notice and this permission notice appear in
;  supporting documentation, and that the name of Micron Technology, Inc. or any
;  of its trademarks may not be used in advertising or publicity pertaining
;  to distribution of the software without specific, written prior permission.
;
;
;	This software and any associated documentation are provided "AS IS" and
;	without warranty of any kind.   MICRON TECHNOLOGY, INC. EXPRESSLY DISCLAIMS
;	ALL WARRANTIES EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO, NONINFRINGEMENT
;	OF THIRD PARTY RIGHTS, AND ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS
;	FOR A PARTICULAR PURPOSE.  MICRON DOES NOT WARRANT THAT THE FUNCTIONS CONTAINED
;	IN THIS SOFTWARE WILL MEET YOUR REQUIREMENTS, OR THAT THE OPERATION OF THIS SOFTWARE
;	WILL BE UNINTERRUPTED OR ERROR-FREE.  FURTHERMORE, MICRON DOES NOT WARRANT OR
;	MAKE ANY REPRESENTATIONS REGARDING THE USE OR THE RESULTS OF THE USE OF ANY
;	ACCOMPANYING DOCUMENTATION IN TERMS OF ITS CORRECTNESS, ACCURACY, RELIABILITY,
;	OR OTHERWISE.
;**************************************************************************************/
;
; Default INI file for the MI-0380-REV1
; <<< MT9V113-MTM8.ini >>>
; $Revision: 1.3 $
; $Date: 2007/04/22 07:13:21 $
;
; This file holds groups of register presets (sections) specific for this sensor. The
; presets allow you to overwrite the power-on default settings with optimized register
; settings.
; The [Default Registers] section contains all optimized register settings for running
; the sensor in the demo environment. Other sections include settings optimized for a
; variety of situations like: Running at different master clock speeds, running under
; different lighting situations, running with different lenses, etc.
; Most of the demonstration software (DevWare, SensorDemo, ...) make use of this file
; to load and store the user presets.
;
; Keyname description:
; REG      = assign a new register value
; BITFIELD = do a READ-MODIFY-WRITE to part of a register. The part is defined as a mask.
; LOAD     = load an alternate section from this section
; STATE    = set non-register state
; DELAY    = delay a certain amount of milliseconds before continuing
;
; Keyname format:
; REG      = [<page>,] <address>, <value>             //<comment>
; BITFIELD = [<page>,] <address>, <mask>, <value>
;            Some examples:
;            BITFIELD=2, 0x05, 0x0020, 1 //for register 5 on page 2, set the 6th bit to 1
;            BITFIELD=0x06, 0x000F, 0    //for register 6, clear the first 4 bits
; LOAD     = <section>
; STATE    = <state>, <value>
; DELAY    = <milliseconds>
;
; <page>         Optional address space for this register. Some sensors (mostly SOC's)
;                have multiple register pages (see the sensor spec or developer's guide)
; <address>      the register address
; <value>        the new value to assign to the register
; <mask>         is the part of a register value that needs to be updated with a new value
; <section>      the name of another section to load
; <state>        non-register program state names [do not modify]
; <milliseconds> wait for this ammount of milliseconds before continuing
; <comment>      Some form of C-style comments are supported in this .ini file
;
;*************************************************************************************/

[Default Registers]
LOAD=Initialize Camera
DELAY=300
//STATE=Gamma,           9
//STATE=Black Correct,   5
//STATE=Contrast,        25

LOAD=Image Setting ExtClk=16.76MHz Op_Pix=27.5MHz 15fps
//LOAD=Image Setting ExtClk=6.75MHz Op_Pix=27.5MHz 15fps
//LOAD=Fixed 15fps
LOAD=Lens Correction
LOAD=Auto Exposure
LOAD=Auto White Balance
LOAD=Gamma Correction
LOAD=Sharpness : 0
LOAD=Refresh


[Initialize Camera]
IMAGE=320,240
REG=0x001A, 0x0011	// RESET_AND_MISC_CONTROL
DELAY=10
REG=0x001A, 0x0010	// RESET_AND_MISC_CONTROL
DELAY=10
REG=0x0018, 0x4028	// STANDBY_CONTROL
REG=0x001A, 0x0210	// RESET_AND_MISC_CONTROL
REG=0x001E, 0x0777	// PAD_SLEW
REG=0x0016, 0x42DF	// CLOCKS_CONTROL
//REG=0x0010, 0x0231	// PLL_DIVIDERS
//REG=0x0012, 0x0000	// PLL_P_DIVIDERS
REG=0x0014, 0x2147	// PLL_CONTROL
DELAY=10
REG=0x0014, 0x2047	// PLL_CONTROL
DELAY=10
REG=0x0014, 0xA046	// PLL_CONTROL
DELAY=10
REG=0x3040, 0x0027	// READ_MODE
REG=0x301A, 0x1218	// RESET_REGISTER
DELAY=100
REG=0x301A, 0x121C	// RESET_REGISTER
//VAR=7, 0x03, 0x0140	// MODE_OUTPUT_WIDTH_A
//VAR=7, 0x05, 0x00F0	// MODE_OUTPUT_HEIGHT_A
//VAR=7, 0x07, 0x0280	// MODE_OUTPUT_WIDTH_B
//VAR=7, 0x09, 0x01E0	// MODE_OUTPUT_HEIGHT_B
VAR=7, 0x17, 0x0026	// MODE_SENSOR_READ_MODE_A
VAR=7, 0x2D, 0x0026	// MODE_SENSOR_READ_MODE_B

VAR8=1, 0x03, 0x06	//(1) SEQ_CMD

////////////////////////////////////////////////////////////////////////////////
; This file was generated by: MT9V113 (SOC0380) Register Wizard
;   Version: 2.8.0.53    Build Date: 06/06/2007
; 
; [PLL PARAMETERS]
; 
; Bypass PLL: Unchecked
; Input Frequency: 6.750
; Use Min Freq.: Unchecked
; Target System Frequency: 27.844
; Target VCO Frequency: Unspecified
; "M" Value: Unspecified
; "N" Value: Unspecified
; 
; Target PLL Frequency: 27.500 MHz
; MT9V113 Input Clock Frequency: 6.750 MHz
; MT9V113 Internal Clock Frequency: 27.844 MHz
; MT9V113 SOC Clock Frequency: 27.844 MHz
; M = 33
; N = 0
; Fpdf = 6.750 MHz
; Fvco = 445.500 MHz
; 
; [CONTEXT A PARAMETERS]
; 
; Requested Frames Per Second: 14.645
; Output Columns: 640
; Output Rows: 480
; Allow Skipping: Unchecked
; Use Context B Line Time: Unchecked
; Low Power: Unchecked
; Blanking Computation: HB Min then VB
; 
; Max Frame Time: 68.2827 msec
; Max Frame Clocks: 950623.0 clocks (13.922 MHz)
; Pixel Clock: divided by 1
; Skip Mode: 1x cols, 1x rows, Bin Mode: No
; Horiz clks:  648 active + 194 blank = 842 total
; Vert  rows:  488 active + 641 blank = 1129 total
; Extra Delay: 5 clocks
; 
; Actual Frame Clocks: 950623 clocks
; Row Time: 60.480 usec / 842 clocks
; Frame time: 68.282685 msec
; Frames per Sec: 14.645 fps
; 
; 50Hz Flicker Period: 165.34 lines
; 60Hz Flicker Period: 137.79 lines
; 
; [CONTEXT B PARAMETERS]
; 
; Requested Frames Per Second: 14.645
; Output Columns: 640
; Output Rows: 480
; Allow Skipping: Unchecked
; Use Context A Line Time: Unchecked
; Low Power: Unchecked
; Blanking Computation: HB Min then VB
; 
; Max Frame Time: 68.2827 msec
; Max Frame Clocks: 950623.0 clocks (13.922 MHz)
; Pixel Clock: divided by 1
; Skip Mode: 1x cols, 1x rows, Bin Mode: No
; Horiz clks:  648 active + 194 blank = 842 total
; Vert  rows:  488 active + 641 blank = 1129 total
; Extra Delay: 5 clocks
; 
; Actual Frame Clocks: 950623 clocks
; Row Time: 60.480 usec / 842 clocks
; Frame time: 68.282685 msec
; Frames per Sec: 14.645 fps
; 
; 50Hz Flicker Period: 165.34 lines
; 60Hz Flicker Period: 137.79 lines
; 
; 

[Image Setting ExtClk=6.75MHz Op_Pix=27.5MHz 15fps]
BITFIELD= 0x14, 1, 1         // Bypass PLL
BITFIELD= 0X14, 2, 0         // Power-down PLL
REG = 0x0010, 0x0021        //PLL Dividers = 0x21
REG = 0x0012, 0x0000        //PLL P Dividers = 0x0
REG = 0x0014, 0x244B        //PLL control: TEST_BYPASS on = 0x244B
DELAY = 1               // Allow PLL to lock
REG = 0x0014, 0x304B        //PLL control: PLL_ENABLE on = 0x304B
POLL_REG=0x0014, 0x8000, ==0, DELAY=50, TIMEOUT=20   // Verify PLL lock
BITFIELD= 0x14, 1, 0         //PLL_BYPASS_OFF
REG = 0x98C, 0x2703        //Output Width (A)
REG = 0x990, 0x0280        //      = 640
REG = 0x98C, 0x2705        //Output Height (A)
REG = 0x990, 0x01E0        //      = 480
REG = 0x98C, 0x2707        //Output Width (B)
REG = 0x990, 0x0280        //      = 640
REG = 0x98C, 0x2709        //Output Height (B)
REG = 0x990, 0x01E0        //      = 480
REG = 0x98C, 0x270D        //Row Start (A)
REG = 0x990, 0x004        //      = 4
REG = 0x98C, 0x270F        //Column Start (A)
REG = 0x990, 0x004        //      = 4
REG = 0x98C, 0x2711        //Row End (A)
REG = 0x990, 0x1EB        //      = 491
REG = 0x98C, 0x2713        //Column End (A)
REG = 0x990, 0x28B        //      = 651
REG = 0x98C, 0x2715        //Row Speed (A)
REG = 0x990, 0x0001        //      = 1
REG = 0x98C, 0x2717        //Read Mode (A)
REG = 0x990, 0x0026        //      = 38
REG = 0x98C, 0x2719        //sensor_fine_correction (A)
REG = 0x990, 0x001A        //      = 26
REG = 0x98C, 0x271B        //sensor_fine_IT_min (A)
REG = 0x990, 0x006B        //      = 107
REG = 0x98C, 0x271D        //sensor_fine_IT_max_margin (A)
REG = 0x990, 0x006B        //      = 107
REG = 0x98C, 0x271F        //Frame Lines (A)
REG = 0x990, 0x0469        //      = 1129
REG = 0x98C, 0x2721        //Line Length (A)
REG = 0x990, 0x034A        //      = 842
REG = 0x98C, 0x2723        //Row Start (B)
REG = 0x990, 0x004        //      = 4
REG = 0x98C, 0x2725        //Column Start (B)
REG = 0x990, 0x004        //      = 4
REG = 0x98C, 0x2727        //Row End (B)
REG = 0x990, 0x1EB        //      = 491
REG = 0x98C, 0x2729        //Column End (B)
REG = 0x990, 0x28B        //      = 651
REG = 0x98C, 0x272B        //Row Speed (B)
REG = 0x990, 0x0001        //      = 1
REG = 0x98C, 0x272D        //Read Mode (B)
REG = 0x990, 0x0026        //      = 38
REG = 0x98C, 0x272F        //sensor_fine_correction (B)
REG = 0x990, 0x001A        //      = 26
REG = 0x98C, 0x2731        //sensor_fine_IT_min (B)
REG = 0x990, 0x006B        //      = 107
REG = 0x98C, 0x2733        //sensor_fine_IT_max_margin (B)
REG = 0x990, 0x006B        //      = 107
REG = 0x98C, 0x2735        //Frame Lines (B)
REG = 0x990, 0x0469        //      = 1129
REG = 0x98C, 0x2737        //Line Length (B)
REG = 0x990, 0x034A        //      = 842
REG = 0x98C, 0x2739        //Crop_X0 (A)
REG = 0x990, 0x0000        //      = 0
REG = 0x98C, 0x273B        //Crop_X1 (A)
REG = 0x990, 0x027F        //      = 639
REG = 0x98C, 0x273D        //Crop_Y0 (A)
REG = 0x990, 0x0000        //      = 0
REG = 0x98C, 0x273F        //Crop_Y1 (A)
REG = 0x990, 0x01DF        //      = 479
REG = 0x98C, 0x2747        //Crop_X0 (B)
REG = 0x990, 0x0000        //      = 0
REG = 0x98C, 0x2749        //Crop_X1 (B)
REG = 0x990, 0x027F        //      = 639
REG = 0x98C, 0x274B        //Crop_Y0 (B)
REG = 0x990, 0x0000        //      = 0
REG = 0x98C, 0x274D        //Crop_Y1 (B)
REG = 0x990, 0x01DF        //      = 479
REG = 0x98C, 0x222D        //R9 Step
REG = 0x990, 0x008A        //      = 138
REG = 0x98C, 0xA408        //search_f1_50
REG = 0x990, 0x19        //      = 25
REG = 0x98C, 0xA409        //search_f2_50
REG = 0x990, 0x1C        //      = 28
REG = 0x98C, 0xA40A        //search_f1_60
REG = 0x990, 0x1F        //      = 31
REG = 0x98C, 0xA40B        //search_f2_60
REG = 0x990, 0x22        //      = 34
REG = 0x98C, 0x2411        //R9_Step_60_A
REG = 0x990, 0x008A        //      = 138
REG = 0x98C, 0x2413        //R9_Step_50_A
REG = 0x990, 0x00A5        //      = 165
REG = 0x98C, 0x2415        //R9_Step_60_B
REG = 0x990, 0x008A        //      = 138
REG = 0x98C, 0x2417        //R9_Step_50_B
REG = 0x990, 0x00A5        //      = 165
REG = 0x98C, 0xA40D        //Stat_min
REG = 0x990, 0x02        //      = 2
REG = 0x98C, 0xA410        //Min_amplitude
REG = 0x990, 0x01        //      = 1

////////////////////////////////////////////////////////////////////////////////
; This file was generated by: MT9V113 (SOC0380) Register Wizard
;   Version: 2.9.0.2    Build Date: 06/29/2007
; 
; [PLL PARAMETERS]
; 
; Bypass PLL: Unchecked
; Input Frequency: 16.760
; Use Min Freq.: Unchecked
; Target System Frequency: 27.759
; Target VCO Frequency: Unspecified
; "M" Value: Unspecified
; "N" Value: Unspecified
; 
; Target PLL Frequency: 27.500 MHz
; MT9V113 Input Clock Frequency: 16.760 MHz
; MT9V113 Internal Clock Frequency: 27.759 MHz
; MT9V113 SOC Clock Frequency: 27.759 MHz
; M = 53
; N = 3
; Fpdf = 4.190 MHz
; Fvco = 444.140 MHz
; 
; [CONTEXT A PARAMETERS]
; 
; Requested Frames Per Second: 15.000
; Output Columns: 640
; Output Rows: 480
; Allow Skipping: Unchecked
; Use Context B Line Time: Unchecked
; Low Power: Unchecked
; Blanking Computation: HB Min then VB
; 
; Max Frame Time: 66.6667 msec
; Max Frame Clocks: 925291.6 clocks (13.879 MHz)
; Pixel Clock: divided by 1
; Skip Mode: 1x cols, 1x rows, Bin Mode: No
; Horiz clks:  648 active + 194 blank = 842 total
; Vert  rows:  488 active + 610 blank = 1098 total
; Extra Delay: 775 clocks
; 
; Actual Frame Clocks: 925291 clocks
; Row Time: 60.666 usec / 842 clocks
; Frame time: 66.666619 msec
; Frames per Sec: 15 fps
; 
; 50Hz Flicker Period: 164.84 lines
; 60Hz Flicker Period: 137.37 lines
; 
; [CONTEXT B PARAMETERS]
; 
; Requested Frames Per Second: 15.000
; Output Columns: 640
; Output Rows: 480
; Allow Skipping: Unchecked
; Use Context A Line Time: Unchecked
; Low Power: Unchecked
; Blanking Computation: HB Min then VB
; 
; Max Frame Time: 66.6667 msec
; Max Frame Clocks: 925291.6 clocks (13.879 MHz)
; Pixel Clock: divided by 1
; Skip Mode: 1x cols, 1x rows, Bin Mode: No
; Horiz clks:  648 active + 194 blank = 842 total
; Vert  rows:  488 active + 610 blank = 1098 total
; Extra Delay: 775 clocks
; 
; Actual Frame Clocks: 925291 clocks
; Row Time: 60.666 usec / 842 clocks
; Frame time: 66.666619 msec
; Frames per Sec: 15 fps
; 
; 50Hz Flicker Period: 164.84 lines
; 60Hz Flicker Period: 137.37 lines
; 
; 

[Image Setting ExtClk=16.76MHz Op_Pix=27.5MHz 15fps]
BITFIELD= 0x14, 1, 1         // Bypass PLL
BITFIELD= 0X14, 2, 0         // Power-down PLL
REG = 0x0010, 0x0335        //PLL Dividers = 0x335
REG = 0x0012, 0x0000        //PLL P Dividers = 0x0
REG = 0x0014, 0x244B        //PLL control: TEST_BYPASS on = 0x244B
DELAY = 1               // Allow PLL to lock
REG = 0x0014, 0x304B        //PLL control: PLL_ENABLE on = 0x304B
POLL_REG=0x0014, 0x8000, ==0, DELAY=50, TIMEOUT=20   // Verify PLL lock
BITFIELD= 0x14, 1, 0         //PLL_BYPASS_OFF
REG = 0x98C, 0x2703        //Output Width (A)
REG = 0x990, 0x0280        //      = 640
REG = 0x98C, 0x2705        //Output Height (A)
REG = 0x990, 0x01E0        //      = 480
REG = 0x98C, 0x2707        //Output Width (B)
REG = 0x990, 0x0280        //      = 640
REG = 0x98C, 0x2709        //Output Height (B)
REG = 0x990, 0x01E0        //      = 480
REG = 0x98C, 0x270D        //Row Start (A)
REG = 0x990, 0x004        //      = 4
REG = 0x98C, 0x270F        //Column Start (A)
REG = 0x990, 0x004        //      = 4
REG = 0x98C, 0x2711        //Row End (A)
REG = 0x990, 0x1EB        //      = 491
REG = 0x98C, 0x2713        //Column End (A)
REG = 0x990, 0x28B        //      = 651
REG = 0x98C, 0x2715        //Row Speed (A)
REG = 0x990, 0x0001        //      = 1
REG = 0x98C, 0x2717        //Read Mode (A)
REG = 0x990, 0x0026        //      = 38
REG = 0x98C, 0x2719        //sensor_fine_correction (A)
REG = 0x990, 0x001A        //      = 26
REG = 0x98C, 0x271B        //sensor_fine_IT_min (A)
REG = 0x990, 0x006B        //      = 107
REG = 0x98C, 0x271D        //sensor_fine_IT_max_margin (A)
REG = 0x990, 0x006B        //      = 107
REG = 0x98C, 0x271F        //Frame Lines (A)
REG = 0x990, 0x044A        //      = 1098
REG = 0x98C, 0x2721        //Line Length (A)
REG = 0x990, 0x034A        //      = 842
REG = 0x98C, 0x2723        //Row Start (B)
REG = 0x990, 0x004        //      = 4
REG = 0x98C, 0x2725        //Column Start (B)
REG = 0x990, 0x004        //      = 4
REG = 0x98C, 0x2727        //Row End (B)
REG = 0x990, 0x1EB        //      = 491
REG = 0x98C, 0x2729        //Column End (B)
REG = 0x990, 0x28B        //      = 651
REG = 0x98C, 0x272B        //Row Speed (B)
REG = 0x990, 0x0001        //      = 1
REG = 0x98C, 0x272D        //Read Mode (B)
REG = 0x990, 0x0026        //      = 38
REG = 0x98C, 0x272F        //sensor_fine_correction (B)
REG = 0x990, 0x001A        //      = 26
REG = 0x98C, 0x2731        //sensor_fine_IT_min (B)
REG = 0x990, 0x006B        //      = 107
REG = 0x98C, 0x2733        //sensor_fine_IT_max_margin (B)
REG = 0x990, 0x006B        //      = 107
REG = 0x98C, 0x2735        //Frame Lines (B)
REG = 0x990, 0x044A        //      = 1098
REG = 0x98C, 0x2737        //Line Length (B)
REG = 0x990, 0x034A        //      = 842
REG = 0x98C, 0x2739        //Crop_X0 (A)
REG = 0x990, 0x0000        //      = 0
REG = 0x98C, 0x273B        //Crop_X1 (A)
REG = 0x990, 0x027F        //      = 639
REG = 0x98C, 0x273D        //Crop_Y0 (A)
REG = 0x990, 0x0000        //      = 0
REG = 0x98C, 0x273F        //Crop_Y1 (A)
REG = 0x990, 0x01DF        //      = 479
REG = 0x98C, 0x2747        //Crop_X0 (B)
REG = 0x990, 0x0000        //      = 0
REG = 0x98C, 0x2749        //Crop_X1 (B)
REG = 0x990, 0x027F        //      = 639
REG = 0x98C, 0x274B        //Crop_Y0 (B)
REG = 0x990, 0x0000        //      = 0
REG = 0x98C, 0x274D        //Crop_Y1 (B)
REG = 0x990, 0x01DF        //      = 479
REG = 0x98C, 0x222D        //R9 Step
REG = 0x990, 0x0089        //      = 137
REG = 0x98C, 0xA408        //search_f1_50
REG = 0x990, 0x19        //      = 25
REG = 0x98C, 0xA409        //search_f2_50
REG = 0x990, 0x1C        //      = 28
REG = 0x98C, 0xA40A        //search_f1_60
REG = 0x990, 0x1F        //      = 31
REG = 0x98C, 0xA40B        //search_f2_60
REG = 0x990, 0x22        //      = 34
REG = 0x98C, 0x2411        //R9_Step_60_A
REG = 0x990, 0x0089        //      = 137
REG = 0x98C, 0x2413        //R9_Step_50_A
REG = 0x990, 0x00A5        //      = 165
REG = 0x98C, 0x2415        //R9_Step_60_B
REG = 0x990, 0x0089        //      = 137
REG = 0x98C, 0x2417        //R9_Step_50_B
REG = 0x990, 0x00A5        //      = 165
REG = 0x98C, 0xA40D        //Stat_min
REG = 0x990, 0x02        //      = 2
REG = 0x98C, 0xA410        //Min_amplitude
REG = 0x990, 0x01        //      = 1

[Viewfinder ON]
FIELD_WR = SEQ_CAP_MODE, VIDEO, 0     //capture parameters, VIDEO Off
FIELD_WR = SEQ_CMD, 1          //Back to preview

[Viewfinder OFF]
FIELD_WR = SEQ_CAP_MODE, VIDEO, 1     //capture parameters, VIDEO On
FIELD_WR = SEQ_CMD, 2          //Capture on

[Video Capture ON]
FIELD_WR = SEQ_CAP_MODE, VIDEO, 1     //capture parameters, VIDEO On
FIELD_WR = SEQ_CMD, 2          //Capture on

[Video Capture OFF]
FIELD_WR = SEQ_CMD, 1          //Back to preview

[Lens Calibration Setup]
REG=0x3330, 0x0140	//(2) OUTPUT_FORMAT_TEST
BITFIELD=0x3040, 0x002, 0

[Lens Calibration Exit]
BITFIELD=0x3040, 0x002, 1
REG=0x3330, 0x0000	//(4) OUTPUT_FORMAT_TEST
BITFIELD=0x3210, 0x08, 1

[Fixed 15fps]
VAR8=2, 0x0C, 0x08	//(1) AE_MAX_INDEX
VAR=7, 0x1F, 0x076C	//(1) MODE_SENSOR_FRAME_LENGTH_A

[Refresh]
REG = 0x98C, 0xA103        //Refresh Sequencer Mode
REG = 0x990, 0x06        //      = 6
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=50
REG = 0x98C, 0xA103        //Refresh Sequencer
REG = 0x990, 0x05        //      = 5
POLL_FIELD=SEQ_CMD, !=0, DELAY=10, TIMEOUT=50

[Auto Exposure]
VAR8=2, 0x07, 0x1A	//(2) AE_GATE
VAR8=2, 0x4C, 0x10	//(1) AE_TARGETBUFFERSPEED
VAR8=2, 0x4F, 0x50	//(5) AE_BASETARGET

[Gamma Correction]
VAR8=11, 0x04, 0x80	//(1) HG_MAX_DLEVEL

VAR8=11, 0x37, 0x03	//(1) HG_GAMMA_MORPH_CTRL
VAR=11, 0x38, 0x0080	//(1) HG_GAMMASTARTMORPH
VAR=11, 0x3A, 0x00B0	//(1) HG_GAMMASTOPMORPH
VAR8=11, 0x3C, 0x00	//(2) HG_GAMMA_TABLE_A_0
VAR8=11, 0x3D, 0x02	//(2) HG_GAMMA_TABLE_A_1
VAR8=11, 0x3E, 0x08	//(2) HG_GAMMA_TABLE_A_2
VAR8=11, 0x3F, 0x18	//(2) HG_GAMMA_TABLE_A_3
VAR8=11, 0x40, 0x38	//(2) HG_GAMMA_TABLE_A_4
VAR8=11, 0x41, 0x55	//(2) HG_GAMMA_TABLE_A_5
VAR8=11, 0x42, 0x72	//(2) HG_GAMMA_TABLE_A_6
VAR8=11, 0x43, 0x8E	//(2) HG_GAMMA_TABLE_A_7
VAR8=11, 0x44, 0xA5	//(2) HG_GAMMA_TABLE_A_8
VAR8=11, 0x45, 0xB6	//(2) HG_GAMMA_TABLE_A_9
VAR8=11, 0x46, 0xC5	//(2) HG_GAMMA_TABLE_A_10
VAR8=11, 0x47, 0xD0	//(2) HG_GAMMA_TABLE_A_11
VAR8=11, 0x48, 0xDA	//(2) HG_GAMMA_TABLE_A_12
VAR8=11, 0x49, 0xE2	//(2) HG_GAMMA_TABLE_A_13
VAR8=11, 0x4A, 0xE9	//(2) HG_GAMMA_TABLE_A_14
VAR8=11, 0x4B, 0xF0	//(2) HG_GAMMA_TABLE_A_15
VAR8=11, 0x4C, 0xF5	//(2) HG_GAMMA_TABLE_A_16
VAR8=11, 0x4D, 0xFA	//(2) HG_GAMMA_TABLE_A_17
VAR8=11, 0x4E, 0xFF	//(2) HG_GAMMA_TABLE_A_18
VAR8=11, 0x4F, 0x00	//(2) HG_GAMMA_TABLE_B_0
VAR8=11, 0x50, 0x01	//(2) HG_GAMMA_TABLE_B_1
VAR8=11, 0x51, 0x02	//(2) HG_GAMMA_TABLE_B_2
VAR8=11, 0x52, 0x05	//(2) HG_GAMMA_TABLE_B_3
VAR8=11, 0x53, 0x11	//(2) HG_GAMMA_TABLE_B_4
VAR8=11, 0x54, 0x1E	//(2) HG_GAMMA_TABLE_B_5
VAR8=11, 0x55, 0x2D	//(2) HG_GAMMA_TABLE_B_6
VAR8=11, 0x56, 0x3F	//(2) HG_GAMMA_TABLE_B_7
VAR8=11, 0x57, 0x53	//(2) HG_GAMMA_TABLE_B_8
VAR8=11, 0x58, 0x6B	//(2) HG_GAMMA_TABLE_B_9
VAR8=11, 0x59, 0x87	//(2) HG_GAMMA_TABLE_B_10
VAR8=11, 0x5A, 0xA0	//(2) HG_GAMMA_TABLE_B_11
VAR8=11, 0x5B, 0xB5	//(2) HG_GAMMA_TABLE_B_12
VAR8=11, 0x5C, 0xC7	//(2) HG_GAMMA_TABLE_B_13
VAR8=11, 0x5D, 0xD6	//(2) HG_GAMMA_TABLE_B_14
VAR8=11, 0x5E, 0xE2	//(2) HG_GAMMA_TABLE_B_15
VAR8=11, 0x5F, 0xED	//(2) HG_GAMMA_TABLE_B_16
VAR8=11, 0x60, 0xF6	//(2) HG_GAMMA_TABLE_B_17
VAR8=11, 0x61, 0xFF	//(2) HG_GAMMA_TABLE_B_18

[Auto White Balance]
VAR=3, 0x06, 0x019B //AWB_CCM_L_0
VAR=3, 0x08, 0xFF4D //AWB_CCM_L_1
VAR=3, 0x0A, 0x001C //AWB_CCM_L_2
VAR=3, 0x0C, 0xFF00 //AWB_CCM_L_3
VAR=3, 0x0E, 0x02FE //AWB_CCM_L_4
VAR=3, 0x10, 0xFF14 //AWB_CCM_L_5
VAR=3, 0x12, 0xFF24 //AWB_CCM_L_6
VAR=3, 0x14, 0xFD7F //AWB_CCM_L_7
VAR=3, 0x16, 0x03E9 //AWB_CCM_L_8
VAR=3, 0x18, 0x002A //AWB_CCM_L_9
VAR=3, 0x1A, 0x003A //AWB_CCM_L_10
VAR=3, 0x1C, 0x0020 //AWB_CCM_RL_0
VAR=3, 0x1E, 0x0065 //AWB_CCM_RL_1
VAR=3, 0x20, 0xFFB1 //AWB_CCM_RL_2
VAR=3, 0x22, 0x0063 //AWB_CCM_RL_3
VAR=3, 0x24, 0xFE8C //AWB_CCM_RL_4
VAR=3, 0x26, 0x006A //AWB_CCM_RL_5
VAR=3, 0x28, 0x0077 //AWB_CCM_RL_6
VAR=3, 0x2A, 0x0161 //AWB_CCM_RL_7
VAR=3, 0x2C, 0xFE76 //AWB_CCM_RL_8
VAR=3, 0x2E, 0x0009 //AWB_CCM_RL_9
VAR=3, 0x30, 0xFFEC //AWB_CCM_RL_10

VAR8=3, 0x5D, 0x73	//(1) AWB_STEADY_BGAIN_OUT_MIN
VAR8=3, 0x5E, 0x8D	//(1) AWB_STEADY_BGAIN_OUT_MAX


[Lens Correction]
REG=0x3658, 0x7D8F //P_RD_P0Q0
REG=0x365A, 0x314D //P_RD_P0Q1
REG=0x365C, 0x7912 //P_RD_P0Q2
REG=0x365E, 0xA10F //P_RD_P0Q3
REG=0x3660, 0x6874 //P_RD_P0Q4
REG=0x3680, 0x1F0B //P_RD_P1Q0
REG=0x3682, 0xD48C //P_RD_P1Q1
REG=0x3684, 0x0E72 //P_RD_P1Q2
REG=0x3686, 0x6B51 //P_RD_P1Q3
REG=0x3688, 0x91F1 //P_RD_P1Q4
REG=0x36A8, 0x1293 //P_RD_P2Q0
REG=0x36AA, 0x04F0 //P_RD_P2Q1
REG=0x36AC, 0x40D6 //P_RD_P2Q2
REG=0x36AE, 0x1931 //P_RD_P2Q3
REG=0x36B0, 0xFCD7 //P_RD_P2Q4
REG=0x36D0, 0x34D1 //P_RD_P3Q0
REG=0x36D2, 0x5C92 //P_RD_P3Q1
REG=0x36D4, 0xEDF5 //P_RD_P3Q2
REG=0x36D6, 0x56B4 //P_RD_P3Q3
REG=0x36D8, 0x47F9 //P_RD_P3Q4
REG=0x36F8, 0x4175 //P_RD_P4Q0
REG=0x36FA, 0xC7F4 //P_RD_P4Q1
REG=0x36FC, 0xE738 //P_RD_P4Q2
REG=0x36FE, 0x8C98 //P_RD_P4Q3
REG=0x3700, 0x4D5C //P_RD_P4Q4
REG=0x364E, 0x7D0F //P_GR_P0Q0
REG=0x3650, 0x31CC //P_GR_P0Q1
REG=0x3652, 0x47D2 //P_GR_P0Q2
REG=0x3654, 0xC58F //P_GR_P0Q3
REG=0x3656, 0x2374 //P_GR_P0Q4
REG=0x3676, 0x232A //P_GR_P1Q0
REG=0x3678, 0x6186 //P_GR_P1Q1
REG=0x367A, 0x1852 //P_GR_P1Q2
REG=0x367C, 0x1F30 //P_GR_P1Q3
REG=0x367E, 0x9D14 //P_GR_P1Q4
REG=0x369E, 0x6A52 //P_GR_P2Q0
REG=0x36A0, 0x3450 //P_GR_P2Q1
REG=0x36A2, 0x3A96 //P_GR_P2Q2
REG=0x36A4, 0x93B4 //P_GR_P2Q3
REG=0x36A6, 0xF5B8 //P_GR_P2Q4
REG=0x36C6, 0x3D11 //P_GR_P3Q0
REG=0x36C8, 0x2832 //P_GR_P3Q1
REG=0x36CA, 0xA816 //P_GR_P3Q2
REG=0x36CC, 0x2BD4 //P_GR_P3Q3
REG=0x36CE, 0x7479 //P_GR_P3Q4
REG=0x36EE, 0x2175 //P_GR_P4Q0
REG=0x36F0, 0xC714 //P_GR_P4Q1
REG=0x36F2, 0xC339 //P_GR_P4Q2
REG=0x36F4, 0x47B6 //P_GR_P4Q3
REG=0x36F6, 0x0BBD //P_GR_P4Q4
REG=0x3662, 0x7CAF //P_BL_P0Q0
REG=0x3664, 0x6BEC //P_BL_P0Q1
REG=0x3666, 0x4CD2 //P_BL_P0Q2
REG=0x3668, 0xE80F //P_BL_P0Q3
REG=0x366A, 0x7B53 //P_BL_P0Q4
REG=0x368A, 0x2B8B //P_BL_P1Q0
REG=0x368C, 0x2C0B //P_BL_P1Q1
REG=0x368E, 0x0EF2 //P_BL_P1Q2
REG=0x3690, 0x77F0 //P_BL_P1Q3
REG=0x3692, 0xA1D4 //P_BL_P1Q4
REG=0x36B2, 0x53B2 //P_BL_P2Q0
REG=0x36B4, 0x5670 //P_BL_P2Q1
REG=0x36B6, 0x1D76 //P_BL_P2Q2
REG=0x36B8, 0xAD10 //P_BL_P2Q3
REG=0x36BA, 0x8179 //P_BL_P2Q4
REG=0x36DA, 0x6611 //P_BL_P3Q0
REG=0x36DC, 0x09D3 //P_BL_P3Q1
REG=0x36DE, 0xB976 //P_BL_P3Q2
REG=0x36E0, 0x7F14 //P_BL_P3Q3
REG=0x36E2, 0x7AD9 //P_BL_P3Q4
REG=0x3702, 0x16D5 //P_BL_P4Q0
REG=0x3704, 0x8CD5 //P_BL_P4Q1
REG=0x3706, 0xD2F9 //P_BL_P4Q2
REG=0x3708, 0x9316 //P_BL_P4Q3
REG=0x370A, 0x1BDD //P_BL_P4Q4
REG=0x366C, 0x7BEF //P_GB_P0Q0
REG=0x366E, 0x300C //P_GB_P0Q1
REG=0x3670, 0x4FF2 //P_GB_P0Q2
REG=0x3672, 0xA2AF //P_GB_P0Q3
REG=0x3674, 0x1EF4 //P_GB_P0Q4
REG=0x3694, 0x570B //P_GB_P1Q0
REG=0x3696, 0xA4A7 //P_GB_P1Q1
REG=0x3698, 0x1392 //P_GB_P1Q2
REG=0x369A, 0x4430 //P_GB_P1Q3
REG=0x369C, 0x82D4 //P_GB_P1Q4
REG=0x36BC, 0x5F12 //P_GB_P2Q0
REG=0x36BE, 0x40D0 //P_GB_P2Q1
REG=0x36C0, 0x2ED6 //P_GB_P2Q2
REG=0x36C2, 0x95B4 //P_GB_P2Q3
REG=0x36C4, 0xEA18 //P_GB_P2Q4
REG=0x36E4, 0x3191 //P_GB_P3Q0
REG=0x36E6, 0x3632 //P_GB_P3Q1
REG=0x36E8, 0xA476 //P_GB_P3Q2
REG=0x36EA, 0xE411 //P_GB_P3Q3
REG=0x36EC, 0x7339 //P_GB_P3Q4
REG=0x370C, 0x2655 //P_GB_P4Q0
REG=0x370E, 0xE994 //P_GB_P4Q1
REG=0x3710, 0xA5D9 //P_GB_P4Q2
REG=0x3712, 0x4777 //P_GB_P4Q3
REG=0x3714, 0x7B9C //P_GB_P4Q4
REG=0x3644, 0x0158 //POLY_ORIGIN_C
REG=0x3642, 0x00E4 //POLY_ORIGIN_R
STATE=Lens Correction Falloff, 90
STATE=Lens Correction Center X, 344
STATE=Lens Correction Center Y, 228
BITFIELD=0x3210, 0x0008, 1 //PGA_ENABLE

[Image Size : VGA]
VAR=7, 0x03, 0x0280	//MODE_OUTPUT_WIDTH_A
VAR=7, 0x05, 0x01E0	//MODE_OUTPUT_HEIGHT_A
VAR8=1, 0x03, 0x05	//SEQ_CMD

[Image Size : QVGA]
VAR=7, 0x03, 0x0140	//MODE_OUTPUT_WIDTH_A
VAR=7, 0x05, 0x00F0	//MODE_OUTPUT_HEIGHT_A
VAR8=1, 0x03, 0x05	//SEQ_CMD

[Image Size : CIF]
VAR=7, 0x03, 0x0160	//MODE_OUTPUT_WIDTH_A
VAR=7, 0x05, 0x0120	//MODE_OUTPUT_HEIGHT_A
VAR8=1, 0x03, 0x05	//SEQ_CMD

[Image Size : QCIF]
VAR=7, 0x03, 0x00B0	//MODE_OUTPUT_WIDTH_A
VAR=7, 0x05, 0x0090	//MODE_OUTPUT_HEIGHT_A
VAR8=1, 0x03, 0x05	//SEQ_CMD

[Effect : Off]
VAR8=1, 0x03, 0x05	//SEQ_CMD
VAR=7, 0x59, 0x6440	//MODE_SPEC_EFFECTS_A
VAR=7, 0x5B, 0x6440	//MODE_SPEC_EFFECTS_B

[Effect : Mono]
VAR=7, 0x59, 0x6441	//MODE_SPEC_EFFECTS_A
VAR=7, 0x5B, 0x6441	//MODE_SPEC_EFFECTS_B
VAR8=1, 0x03, 0x05	//SEQ_CMD

[Effect : Sepia]
VAR=7, 0x59, 0x6442	//MODE_SPEC_EFFECTS_A
VAR=7, 0x5B, 0x6442	//MODE_SPEC_EFFECTS_B
VAR=7, 0x63, 0xA921	//MODE_COMMONMODESETTINGS_FX_SEPIA_SETTINGS
VAR8=1, 0x03, 0x05	//SEQ_CMD

[Manual WB -> Auto WB]
VAR8=1, 0x02, 0x0F	//SEQ_MODE

[Manual White Balance : P1]
VAR8=1, 0x02, 0x0B	//SEQ_MODE
VAR8=3, 0x53, 0x0	//AWB_CCM_POSITION

[Manual White Balance : P2]
VAR8=1, 0x02, 0x0B	//SEQ_MODE
VAR8=3, 0x53, 0x12	//AWB_CCM_POSITION

[Manual White Balance : P3]
VAR8=1, 0x02, 0x0B	//SEQ_MODE
VAR8=3, 0x53, 0x24	//AWB_CCM_POSITION

[Manual White Balance : P4]
VAR8=1, 0x02, 0x0B	//SEQ_MODE
VAR8=3, 0x53, 0x36	//AWB_CCM_POSITION

[Manual White Balance : P5]
VAR8=1, 0x02, 0x0B	//SEQ_MODE
VAR8=3, 0x53, 0x48	//AWB_CCM_POSITION

[Manual White Balance : P6]
VAR8=1, 0x02, 0x0B	//SEQ_MODE
VAR8=3, 0x53, 0x5A	//AWB_CCM_POSITION

[Manual White Balance : P7]
VAR8=1, 0x02, 0x0B	//SEQ_MODE
VAR8=3, 0x53, 0x6C	//AWB_CCM_POSITION

[Manual White Balance : P8]
VAR8=1, 0x02, 0x0B	//SEQ_MODE
VAR8=3, 0x53, 0x7F	//AWB_CCM_POSITION

[Sharpness : 0]
REG=0x326C, 0x1600	//APERTURE_PARAMETERS
